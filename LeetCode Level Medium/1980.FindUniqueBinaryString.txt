1980. Find Unique Binary String

Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

Example 1:
Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.

Example 2:
Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.

Example 3:
Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
 
Constraints:
n == nums.length
1 <= n <= 16
nums[i].length == n
nums[i] is either '0' or '1'.
All the strings of nums are unique.

code:

Approach 1:

class Solution {
    public ArrayList<String> genearteAllStrings(String p,int n){
        if(n==0){
            ArrayList<String> temp=new ArrayList<>();
            temp.add(p);
            return temp;
        }
        ArrayList<String> result=new ArrayList<>();
        result.addAll(genearteAllStrings(p+'0',n-1));
        result.addAll(genearteAllStrings(p+'1',n-1));
        return result;
    }
    public String findDifferentBinaryString(String[] nums) {
        ArrayList<String> present=new ArrayList<>();
        for(String word:nums){
            present.add(word);
        }
        ArrayList<String> allStrings=genearteAllStrings("",nums[0].length());
        for(String s:allStrings){
            if(!present.contains(s)){
                return s;
            }
        }
        return "";
    }
}