516. Longest Palindromic Subsequence

Given a string s, find the longest palindromic subsequence's length in s.
A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".

Example 2:
Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".

Constraints:
1 <= s.length <= 1000
s consists only of lowercase English letters.

code:

class Solution {
    public int lps(String s,int i,int j,int[][] dp){
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(i==j){
            dp[i][j]=1;
        }
        else if(i>j){
            dp[i][j]=0;
        }
        else{
            char ch1=s.charAt(i);
            char ch2=s.charAt(j);
            int x=0;
            int y=0;
            int z=0;
            if(ch1==ch2){
                x = 2 + lps(s, i+1, j-1, dp);
            }else{
                y = lps(s, i+1, j, dp);
                z = lps(s, i, j-1, dp);
            }
            dp[i][j]=Math.max(x,Math.max(y,z));
        }
        return dp[i][j];
    }
    public int longestPalindromeSubseq(String s) {
        int[][] dp=new int[s.length()][s.length()];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        return lps(s,0,s.length()-1,dp);
    }
}