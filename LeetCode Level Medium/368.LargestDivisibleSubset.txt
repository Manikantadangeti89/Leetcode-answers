368. Largest Divisible Subset

Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Example 1:
Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]

Constraints:
1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.

code:

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        Map<String, List<Integer>> memo = new HashMap<>();
        return helper(nums, -1, 0, memo);
    }

    static List<Integer> helper(int[] nums, int prevIndex, int currIndex, Map<String, List<Integer>> memo) {
        if (currIndex == nums.length) {
            return new ArrayList<>();
        }

        String key = prevIndex + "," + currIndex;
        if (memo.containsKey(key)) return memo.get(key);

        List<Integer> exclude = helper(nums, prevIndex, currIndex + 1, memo);

        List<Integer> include = new ArrayList<>();
        if (prevIndex == -1 || nums[currIndex] % nums[prevIndex] == 0) {
            include = helper(nums, currIndex, currIndex + 1, memo);
            include = new ArrayList<>(include);
            include.add(0, nums[currIndex]);
        }

        List<Integer> result = include.size() > exclude.size() ? include : exclude;
        memo.put(key, result);
        return result;
    }
}
