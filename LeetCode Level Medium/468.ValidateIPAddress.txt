468. Validate IP Address

Given a string queryIP, return "IPv4" if IP is a valid IPv4 address, "IPv6" if IP is a valid IPv6 address or "Neither" if IP is not a correct IP of any type.
A valid IPv4 address is an IP in the form "x1.x2.x3.x4" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, "192.168.1.1" and "192.168.1.0" are valid IPv4 addresses while "192.168.01.1", "192.168.1.00", and "192.168@1.1" are invalid IPv4 addresses.
A valid IPv6 address is an IP in the form "x1:x2:x3:x4:x5:x6:x7:x8" where:
1 <= xi.length <= 4
xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').
Leading zeros are allowed in xi.
For example, "2001:0db8:85a3:0000:0000:8a2e:0370:7334" and "2001:db8:85a3:0:0:8A2E:0370:7334" are valid IPv6 addresses, while "2001:0db8:85a3::8A2E:037j:7334" and "02001:0db8:85a3:0000:0000:8a2e:0370:7334" are invalid IPv6 addresses.

Example 1:
Input: queryIP = "172.16.254.1"
Output: "IPv4"
Explanation: This is a valid IPv4 address, return "IPv4".

Example 2:
Input: queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"
Output: "IPv6"
Explanation: This is a valid IPv6 address, return "IPv6".

Example 3:
Input: queryIP = "256.256.256.256"
Output: "Neither"
Explanation: This is neither a IPv4 address nor a IPv6 address.

Constraints:
queryIP consists only of English letters, digits and the characters '.' and ':'.

code:

class Solution {
    static boolean checkIPv4(String queryIP){
        //checks length
        if(queryIP.length()>15){
            return false;
        }
        //splits into array and checks array length
        String[] nums = queryIP.split("\\.", -1);
        if(nums.length!=4){
            return false;
        }
        for(String num:nums){
            if (num.length() == 0 || num.length() > 3) {
                return false;
            }
            //checks for trailing zeroes
            if (num.length() > 1 && num.charAt(0) == '0') {
                return false;
            }
            //checks for valid digits
            for (char ch : num.toCharArray()) {
                if (!Character.isDigit(ch)) {
                    return false;
                }
            }
            //checks the range
            int number=Integer.parseInt(num);
            if(number<0 || number>255){
                return false;
            }

        }
        return true;
    }
    static boolean checkIPv6(String queryIP){
        //checks length
        if(queryIP.length()>39){
            return false;
        }
        //splits into array and checks array length
        String[] nums = queryIP.split(":", -1);
        if(nums.length!=8){
            return false;
        }
        for(String num:nums){
            //checks block length
            if(num.length()==0 || num.length()>4){
                return false;
            }
            //checks if the character/digit is allowed or not
            for (char ch : num.toCharArray()) {
                if (!Character.isDigit(ch)) {
                    if("abcdefABCDEF".indexOf(ch) == -1){
                        return false;
                    }
                }
            }
        }
        return true;
    }
    public String validIPAddress(String queryIP) {
        if (queryIP.contains(".") && checkIPv4(queryIP)) {
            return "IPv4";
        } else if (queryIP.contains(":") && checkIPv6(queryIP)) {
            return "IPv6";
        }
        return "Neither";
    }
}