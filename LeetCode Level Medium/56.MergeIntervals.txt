56. Merge Intervals

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

code:

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(row1,row2)->Integer.compare(row1[0],row2[0]));
        ArrayList<int[]> list=new ArrayList<>();
        int[] curinterval=intervals[0];
        list.add(curinterval);
        for(int i=1;i<intervals.length;i++){
            int curend=curinterval[1];
            int nextstart=intervals[i][0];
            int nextend=intervals[i][1];
            if(curend>=nextstart){
                curinterval[1]=Math.max(curend,nextend);
            }else{
                curinterval=intervals[i];
                list.add(curinterval);
            }
        }

        return list.toArray(new int[list.size()][]);
    }
}