416. Partition Equal Subset Sum

Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100

code:

class Solution {
    static boolean helper(int[] nums,int i,int cursum,int sum,int[][] dp){
        if(i == nums.length){
            return false;
        }
        if(cursum==sum){
            return true;
        }
        if(dp[i][cursum] != -1){
            return dp[i][cursum] == 1;
        }
        boolean take = false;
        if(sum >= nums[i]){
            take = helper(nums,i+1,cursum+nums[i],sum-nums[i], dp);
        }
        boolean skip = helper(nums,i+1,cursum,sum, dp);
        dp[i][cursum] = (take || skip) ? 1 : 0;
        return take || skip;
    }
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int num : nums){
            sum += num;
        }
        if(sum%2 != 0){
            return false;
        }
        int[][] dp = new int[nums.length][sum+1];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        return helper(nums,0,0,sum,dp);
    }
}