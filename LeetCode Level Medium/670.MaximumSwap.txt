670. Maximum Swap

You are given an integer num. You can swap two digits at most once to get the maximum valued number.
Return the maximum valued number you can get.

Example 1:
Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.

Example 2:
Input: num = 9973
Output: 9973
Explanation: No swap.

Constraints:
0 <= num <= 108

code:

class Solution {
    public int maximumSwap(int num) {
        char[] digits = Integer.toString(num).toCharArray();
        int[] last = new int[10]; // Array to store the last occurrence of each digit (0-9)
        
        // Store the last occurrence of each digit in the array
        for (int i = 0; i < digits.length; i++) {
            last[digits[i] - '0'] = i;
        }
        
        // Try to find the best swap opportunity
        for (int i = 0; i < digits.length; i++) {
            // Check if there is a larger digit later
            for (int d = 9; d > digits[i] - '0'; d--) {
                if (last[d] > i) { // If the larger digit occurs later in the number
                    // Swap the digits
                    char temp = digits[i];
                    digits[i] = digits[last[d]];
                    digits[last[d]] = temp;
                    
                    // Return the resulting number after the swap
                    return Integer.parseInt(new String(digits));
                }
            }
        }
        
        // If no swap is possible, return the original number
        return num;
    }
}
