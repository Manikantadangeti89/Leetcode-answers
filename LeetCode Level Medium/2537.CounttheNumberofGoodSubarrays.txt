2537. Count the Number of Good Subarrays

Given an integer array nums and an integer k, return the number of good subarrays of nums.
A subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,1,1,1,1], k = 10
Output: 1
Explanation: The only good subarray is the array nums itself.

Example 2:
Input: nums = [3,1,4,3,2,2,4], k = 2
Output: 4
Explanation: There are 4 different good subarrays:
- [3,1,4,3,2,2] that has 2 pairs.
- [3,1,4,3,2,2,4] that has 3 pairs.
- [1,4,3,2,2,4] that has 2 pairs.
- [4,3,2,2,4] that has 2 pairs.
 
Constraints:
1 <= nums.length <= 105
1 <= nums[i], k <= 109

code:

class Solution {
    public long countGood(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        long count = 0;
        long cur_pairs = 0;
        int left = 0;
        int right = 0;
        for(right=0;right<nums.length;right++){
            int num = nums[right];
            cur_pairs += map.getOrDefault(num,0);
            map.put(num, map.getOrDefault(num,0)+1);

            while(cur_pairs>=k){
                count += (nums.length-right);

                int cur = nums[left];
                map.put(cur, map.get(cur)-1);
                cur_pairs -= map.get(cur);
                if(map.get(cur)==0){
                    map.remove(cur);
                }
                left++;
            }
        }
        return count;
    }
}