92. Reverse Linked List II

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

Constraints:
The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

code:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        //Traverse till node before left
        ListNode temp=head;
        int i=1;
        while(temp!=null && i<left-1){
            temp=temp.next;
            i++;
        }
        ListNode nodeBeforeLeft=temp;
        ListNode partstart=temp.next;
        ListNode cur=partstart;
        ListNode prev=null;
        //If left==1 then the partstart will be head
        //and nodeBeforeLeft will be null
        if(left==1){
            cur=nodeBeforeLeft;
            partstart=nodeBeforeLeft;
            nodeBeforeLeft=null;
        }
        i=left;
        //Reverse the list from left till right
        while(cur!=null && i<=right){
            ListNode nextnode=cur.next;
            cur.next=prev;
            prev=cur;
            cur=nextnode;
            i++;
        }
        ListNode partend=prev;
        ListNode nodeAfterRight=cur;
        //connect partend to the node before left
        if (nodeBeforeLeft != null) {
            nodeBeforeLeft.next = partend;
        } else {
            head = partend;
        }
        //connect node after right to the partend
        partstart.next=nodeAfterRight;
        return head;
    }
}