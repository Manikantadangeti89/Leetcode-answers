79. Word Search

Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 
Constraints:
m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.
 
code:

class Solution {
    static boolean isValid(char[][] board, boolean[][] visited, int i, int j, String word, int cur){
        if(i<0 || i>=visited.length || j<0 || j>=visited[0].length){
            return false;
        }
        if(!visited[i][j] && board[i][j]==word.charAt(cur)){
            return true;
        }
        return false;
    }

    static boolean helper(char[][] board, String word, boolean[][] visited, int cur, int i, int j){
        if(cur==word.length()){
            return true;
        }
        int[][] neighbours = {{-1,0},{1,0},{0,-1},{0,1}};
        boolean res = false;
        for(int[] neighbour : neighbours){
            int newX = i+neighbour[0];
            int newY = j+neighbour[1];
            if(isValid(board,visited,newX,newY,word,cur)){
                visited[newX][newY] = true;
                res = res || helper(board, word, visited, cur+1, newX, newY);
                visited[newX][newY] = false;
            }
        }
        return res;
    }
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(boolean[] row : visited){
            Arrays.fill(row, false);
        }
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j] == word.charAt(0)){
                    visited[i][j] = true;
                    boolean temp = helper(board, word, visited, 1, i, j);
                    if(temp){
                        return true;
                    }
                    visited[i][j] = false;
                }
            }
        }
        return false;
    }

}