42. Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

code:

class Solution {
    // Time complexity : O(n) , space complexity : O(n)
    // public int trap(int[] height) {
    //     int[] leftmax = new int[height.length];
    //     int[] rightmax = new int[height.length];
    //     int max = 0;
    //     for(int i=0;i<height.length;i++){
    //         leftmax[i] = max;
    //         max = Math.max(max, height[i]);
    //     }
    //     max = 0;
    //     for(int i=height.length-1;i>=0;i--){
    //         rightmax[i] = max;
    //         max = Math.max(max, height[i]);
    //     }
    //     int res = 0;
    //     for(int i=0;i<height.length;i++){
    //         int temp = Math.min(leftmax[i], rightmax[i]);
    //         res += Math.max(temp-height[i], 0);
    //     }
    //     return res;
    // }

    // Time complexity : O(n) , space complexity : O(1)
    public int trap(int[] height) {
        int left = 0, maxleft = 0, maxright = 0, res = 0;
        int right = height.length-1;
        while(left<=right){
            if(height[left] < height[right]){
                if(height[left] > maxleft){
                    maxleft = height[left];
                }
                else{
                    res += maxleft - height[left];
                }
                left++;
            }
            else{
                if(height[right] > maxright){
                    maxright = height[right];
                }
                else{
                    res += maxright - height[right];
                }
                right--;
            }
        }
        return res;
    }
}