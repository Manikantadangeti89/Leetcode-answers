4. Median of Two Sorted Arrays

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Constraints:
nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

code:

class Solution {
    // public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    //     ArrayList<Integer> list = new ArrayList<>();
    //     for(int num : nums1){
    //         list.add(num);
    //     }
    //     for(int num : nums2){
    //         list.add(num);
    //     }
    //     Collections.sort(list);
    //     int n = list.size();
    //     if(n%2!=0){
    //         return (double)list.get((n/2));
    //     }
    //     return (double)(list.get(n/2)+list.get((n/2)-1))/2;
    // }
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length){
            return findMedianSortedArrays(nums2, nums1);
        }
        //nums1 is the smallest
        int m = nums1.length;
        int n = nums2.length;
        int low = 0;
        int high = m;
        while(low<=high){
            int partitionX = low + (high-low)/2;
            int partitionY = (m+n+1)/2 - partitionX;
            int maxleftX = (partitionX==0) ? Integer.MIN_VALUE : nums1[partitionX-1];
            int minrightX = (partitionX==m) ? Integer.MAX_VALUE : nums1[partitionX];
            int maxleftY = (partitionY==0) ? Integer.MIN_VALUE : nums2[partitionY-1];
            int minrightY = (partitionY==n) ? Integer.MAX_VALUE : nums2[partitionY];
            // If found
            if(maxleftX<=minrightY && maxleftY<=minrightX){
                if((m+n) % 2 == 0 ){
                    double res = (Math.max(maxleftX, maxleftY) + Math.min(minrightX, minrightY))/2.0;
                    return res;
                }
                else{
                    return (double)(Math.max(maxleftX, maxleftY));
                }
            }
            else if(maxleftX > minrightY){
                high = partitionX-1;
            }
            else{
                low = partitionX+1;
            }
        }
        return -1;
    }
}

        