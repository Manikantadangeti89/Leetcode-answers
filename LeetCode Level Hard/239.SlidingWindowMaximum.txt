239. Sliding Window Maximum

You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:
Input: nums = [1], k = 1
Output: [1]
 
Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

code:

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(k==1){
            return nums;
        }
        ArrayList<Integer> list=new ArrayList<>();
        //fist initialize deque upto k elemnts by storing the indices
        Deque<Integer> deque=new ArrayDeque<>();
        int right=0;
        for(right=0;right<k;right++){
            if(deque.isEmpty()){
                deque.addFirst(right);
            }
            else{
                if(nums[right]>nums[deque.getFirst()]){
                    deque.addFirst(right);
                }else{
                    while(!deque.isEmpty() && nums[deque.getLast()]<=nums[right]){
                        deque.removeLast();
                    }
                    deque.addLast(right);
                }
            }
        }
        list.add(nums[deque.getFirst()]);
        //Then traverse through remaining array and find the max
        for(int i=right;i<nums.length;i++){
            int num=nums[i];
            while(deque.getFirst()<=i-k){
                deque.removeFirst();
            }
            //If new element is max add it to start of deque
            if(num>nums[deque.getFirst()]){
                deque.addFirst(i);
            }else{
                while(!deque.isEmpty() && nums[deque.getLast()]<=num){
                    deque.removeLast();
                }
                deque.addLast(i);
            }
            list.add(nums[deque.getFirst()]);
        }
        int[] arr=new int[list.size()];
        for(int x=0;x<list.size();x++){
            arr[x]=list.get(x);
        }
        return arr;
    }
}