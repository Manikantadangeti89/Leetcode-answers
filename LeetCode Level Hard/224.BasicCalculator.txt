224. Basic Calculator

Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.
Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

Example 1:
Input: s = "1 + 1"
Output: 2

Example 2:
Input: s = " 2-1 + 2 "
Output: 3

Example 3:
Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23

Constraints:
1 <= s.length <= 3 * 105
s consists of digits, '+', '-', '(', ')', and ' '.
s represents a valid expression.
'+' is not used as a unary operation (i.e., "+1" and "+(2 + 3)" is invalid).
'-' could be used as a unary operation (i.e., "-1" and "-(2 + 3)" is valid).
There will be no two consecutive operators in the input.
Every number and running calculation will fit in a signed 32-bit integer.

code:

class Solution {
    public int calculate(String s) {
        int number = 0; // to store cur number if it is of multiple digits
        int result = 0;
        int sign = 1;
        Stack<Integer> stack = new Stack<>();
        for(char ch : s.toCharArray()){
            if(Character.isDigit(ch)){
                number = number*10 + (ch-'0');
            }
            else if(ch=='+'){
                result += sign * number;
                number = 0;
                sign = 1;
            }
            else if(ch=='-'){
                result += sign * number;
                number = 0;
                sign = -1;
            }
            else if(ch=='('){
                stack.push(result);
                stack.push(sign);
                result = 0;
                sign = 1;
            }
            else if(ch==')'){
                if(number!=0){
                    result += sign * number;
                    number = 0;
                }
                result = stack.pop() * result;
                result = stack.pop() + result;
            }
        }
        if(number != 0){
            result += sign*number;
        }
        return result;
    }
}  