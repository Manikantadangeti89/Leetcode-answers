51. N-Queens

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [["Q"]]

Constraints:
1 <= n <= 9

code:

class Solution {
    public List<List<String>> returnAllWays(boolean[][] board,int row){
        if(row==board.length){
            List<List<String>> temp=new ArrayList<>();
            temp.add(generateList(board));
            return temp;
        }
        List<List<String>> result=new ArrayList<>();
        for(int col=0;col<board.length;col++){
            if(isSafe(board,row,col)){
                board[row][col]=true;
                result.addAll(returnAllWays(board,row+1));
                board[row][col]=false;
            }
        }
        return result;
    }
    public boolean isSafe(boolean[][] board,int row,int col){
        //check vertical
        for(int i=1;i<=row;i++){
            if(board[row-i][col]){
                return false;
            }
        }
        //check left diagonal
        int maxLeft=Math.min(row,col);
        for(int i=1;i<=maxLeft;i++){
            if(board[row-i][col-i]){
                return false;
            }
        }
        //check right diagonal
        int maxRight=Math.min(row,board.length-col-1);
        for(int i=1;i<=maxRight;i++){
            if(board[row-i][col+i]){
                return false;
            }
        }
        return true;
    }
    public List<String> generateList(boolean[][] board){
        List<String> innerlist=new ArrayList<>();
        for(boolean[] row:board){
            StringBuilder res=new StringBuilder();
            for(boolean e:row){
                if(e){
                    res.append('Q');
                }else{
                    res.append('.');
                }
            }
            innerlist.add(res.toString());
        }
        return innerlist;
    }
    public List<List<String>> solveNQueens(int n) {
        boolean[][] board=new boolean[n][n];
        return returnAllWays(board,0);
    }
}