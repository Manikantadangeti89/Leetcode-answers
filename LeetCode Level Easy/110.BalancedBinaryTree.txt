110. Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:
Input: root = []
Output: true

Constraints:
The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104
 
code:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// class Solution {
//     static int height(TreeNode node,HashMap<TreeNode,Integer> map){
//         if(map.containsKey(node)){
//             return map.get(node);
//         }
//         if(node==null){
//             return 0;
//         }
//         int left = height(node.left, map);
//         int right = height(node.right, map);
//         map.put(node, 1+Math.max(left, right));
//         return map.get(node);
//     }
//     static boolean helper(TreeNode node,HashMap<TreeNode,Integer> map){
//         if(node==null){
//             return true;
//         }
//         if(node.left==null && node.right==null){
//             return true;
//         }
//         int left = height(node.left, map);
//         int right = height(node.right, map);
//         return Math.abs(left - right) <= 1 && helper(node.left, map) && helper(node.right, map);
//     }
//     public boolean isBalanced(TreeNode root) {
//         HashMap<TreeNode,Integer> map = new HashMap<>();
//         return helper(root, map);
//     }
// }
class Solution {
    static int checkBalanced(TreeNode node) {
        if(node==null){
            return 0;
        }
        int left = checkBalanced(node.left);
        if(left==-1){
            return left;
        }

        int right = checkBalanced(node.right);
        if(right==-1){
            return right;
        }

        if(Math.abs(left-right) > 1){
            return -1;
        }

        return 1 + Math.max(left, right);
    }
    public boolean isBalanced(TreeNode root) {
        return checkBalanced(root) != -1;
    }
}