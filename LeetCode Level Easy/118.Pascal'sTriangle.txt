118. Pascal's Triangle

Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Example 2:
Input: numRows = 1
Output: [[1]]

Constraints:
1 <= numRows <= 30

code:

// class Solution {
//     static List<List<Integer>> helper2(int i, int n, List<Integer> cur){
//         if(i==n){
//             List<List<Integer>> res = new ArrayList<>();
//             res.add(cur);
//             return res;
//         }
//         List<List<Integer>> res = new ArrayList<>();
//         res.add(cur);
//         List<Integer> temp = new ArrayList<>();
//         temp.add(1);
//         for(int j=1;j<cur.size();j++){
//             temp.add(cur.get(j)+cur.get(j-1));
//         }
//         temp.add(1);
//         res.addAll(helper2(i+1, n, temp));
//         return res;
//     }
//     public List<List<Integer>> generate(int numRows) {
//         List<Integer> cur = new ArrayList<>();
//         cur.add(1);
//         return helper2(1, numRows, cur);
//     }
// }


class Solution {
    static void helper2(List<List<Integer>> ans,int i, int n, List<Integer> cur){
        if(i==n){
            ans.add(cur);
            return;
        }
        ans.add(cur);
        List<Integer> temp = new ArrayList<>();
        temp.add(1);
        for(int j=1;j<cur.size();j++){
            temp.add(cur.get(j)+cur.get(j-1));
        }
        temp.add(1);
        helper2(ans, i+1, n, temp);
    }
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        cur.add(1);
        helper2(ans, 1, numRows, cur);
        return ans;
    }
}