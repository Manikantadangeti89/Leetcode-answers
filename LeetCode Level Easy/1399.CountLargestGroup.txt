1399. Count Largest Group

You are given an integer n.
Each number from 1 to n is grouped according to the sum of its digits.
Return the number of groups that have the largest size.

Example 1:
Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].
There are 4 groups with largest size.

Example 2:
Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.

Constraints:
1 <= n <= 104

code:

class Solution {
    static int getSum(int n){
        int sum = 0;
        while(n>0){
            int rem = n%10;
            sum += rem;
            n /= 10;
        }
        return sum;
    }
    public int countLargestGroup(int n) {
        HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();
        for(int i = 1;i<=n;i++){
            int sum = getSum(i);
            if(!map.containsKey(sum)){
                map.put(sum, new ArrayList<Integer>());
                map.get(sum).add(i);
            }else{
                map.get(sum).add(i);
            }
        }
        int max = 0;
        for(int num : map.keySet()){
            max = Math.max(max, map.get(num).size());
        }
        int count = 0;
        for(int num : map.keySet()){
            if(map.get(num).size() == max){
                count++;
            }
        }
        return count;
    }
}