414. Third Maximum Number

Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.

Example 2:
Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.

Example 3:
Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.

Constraints:
1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

code:

class Solution {
    public int thirdMax(int[] nums) {
        // Use three variables to store the maximum, second maximum, and third maximum values
        Integer max = null;
        Integer secMax = null;
        Integer thirdMax = null;

        // Iterate through the array
        for (Integer num : nums) {
            // Skip if the number is already one of the max values (to avoid duplicates)
            if (num.equals(max) || num.equals(secMax) || num.equals(thirdMax)) {
                continue;
            }
            
            // Update max, secMax, and thirdMax
            if (max == null || num > max) {
                thirdMax = secMax;
                secMax = max;
                max = num;
            } else if (secMax == null || num > secMax) {
                thirdMax = secMax;
                secMax = num;
            } else if (thirdMax == null || num > thirdMax) {
                thirdMax = num;
            }
        }

        // If there is no third maximum, return the maximum
        return thirdMax == null ? max : thirdMax;
    }
}
